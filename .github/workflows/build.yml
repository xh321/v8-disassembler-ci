name: Build V8 Disassembler

on:
  workflow_dispatch:
    inputs:
      v8_branch:
        description: 'V8 Version / Branch'
        required: true
        default: '13.2.152.27'
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    env:
      V8_BRANCH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.v8_branch || '13.2.152.27' }}
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install depot_tools
        # language=PowerShell
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git C:\depot_tools
          echo "C:\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Fetch V8
        # language=PowerShell
        run: |
          fetch v8
          cd v8
          git checkout $env:V8_BRANCH
          gclient sync -v

      - name: Patch V8
        # language=PowerShell
        run: |
          ./patcher.ps1

      - name: Display Environment Info
        # language=PowerShell
        run: |
          clang++ --version
          echo "Environment Variables:"
          Get-ChildItem env:
          
      - name: Verify V8 Disassembler Source
        # language=PowerShell
        run: |
          if (-not (Test-Path "v8dasm.cpp")) {
            echo "Error: v8dasm.cpp not found in the project root directory!"
            exit 1
          }
          echo "Found v8dasm.cpp in the project root directory"

      - name: Build V8 Disassembler
        id: build
        # language=PowerShell
        run: |
          cd v8
          $release = "out.gn\x64.release"
          New-Item -ItemType Directory -Path $release -Force
          Set-Content -Path "$release\args.gn" -Value @"
          dcheck_always_on = false
          is_component_build = false
          is_debug = false
          target_cpu = "x64"
          use_custom_libcxx = false
          v8_monolithic = true
          v8_use_external_startup_data = false
          
          v8_static_library = true
          v8_enable_disassembler = true
          v8_enable_object_print = true
          v8_enable_sandbox = true
          v8_enable_pointer_compression = true
          v8_enable_pointer_compression_shared_cage = true
          v8_enable_external_code_space = true
          
          treat_warnings_as_errors = false
          "@
          gn gen $release
          ninja -C $release v8_monolith
          
          # Compile v8dasm using the source from project root
          
          # Using appropriate linking options for Windows
          clang++ ..\v8dasm.cpp -g -std=c++17 -Iinclude -L"$release\obj" -lv8_libbase -lv8_libplatform -lv8_monolith -o v8dasm.exe -DV8_COMPRESS_POINTERS -DV8_ENABLE_SANDBOX -DV8_COMPRESS_POINTERS_IN_SHARED_CAGE -DV8_ENABLE_EXTERNAL_CODE_SPACE
          
          # Check if compilation was successful
          if ($LASTEXITCODE -ne 0) {
              echo "Failed to compile v8dasm, trying alternative linking options"
              # Try alternative compilation command
              clang++ ..\v8dasm.cpp -g -std=c++17 -Iinclude -L"$release\obj" -lv8_libplatform -lv8_libbase -lv8_monolith -o v8dasm.exe -DV8_COMPRESS_POINTERS -DV8_ENABLE_SANDBOX -DV8_COMPRESS_POINTERS_IN_SHARED_CAGE -DV8_ENABLE_EXTERNAL_CODE_SPACE -ldbghelp -lwinmm
          }
          
          # Copy v8dasm.exe to output directory
          cp v8dasm.exe $release\
          
          # Check if executable exists
          if (Test-Path "$release\v8dasm.exe") {
              echo "V8 Disassembler compilation successful: $(Get-Item "$release\v8dasm.exe").Length bytes"
          } else {
              echo "Error: V8 Disassembler compilation failed!"
              exit 1
          }

          $artifact = "v8dasm-$env:V8_BRANCH"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "artifact=$artifact"

      - name: Cleanup Artifact
        # language=PowerShell
        run: |
          cd v8\out.gn\x64.release
          Get-ChildItem
          Remove-Item -Path gen -Recurse -Force
          Remove-Item -Path obj -Recurse -Force
          # Keep v8dasm.exe and necessary library files

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact }}
          path: v8/out.gn/x64.release
          compression-level: 9
